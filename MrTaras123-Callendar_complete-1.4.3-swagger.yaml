swagger: '2.0'
info:
  description: this is my app calendar
  version: 1.4.3
  title: My_Calendar
  termsOfService: http://swagger.io/terms/
  contact:
    email: apiteam@swagger.io
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
tags:
- name: event
  description: Everything about your events
- name: user
  description: Say hello to my user
paths:
  /event:
    post:
      tags:
      - event
      summary: create new event 
      operationId: addevent
      consumes:
      - application/json
      - application/xml
      produces:
      - application/json
      - application/xml
      parameters:
      - in: body
        name: body
        description: event to be added to the calendar
        required: true
        schema:
          $ref: '#/definitions/Event'
      responses:
        405:
          description: Invalid input
      security:
      - petstore_auth:
        - write:pets
        - read:pets
    put:
      tags:
      - event
      summary: edit an existing event
      operationId: editEvent
      consumes:
      - application/json
      - application/xml
      produces:
      - application/json
      - application/xml
      parameters:
      - in: body
        name: body
        description: event to be edited 
        required: true
        schema:
          $ref: '#/definitions/Event'
      responses:
        400:
          description: Invalid event ID supplied
        404:
          description: event not found
        405:
          description: Validation exception
      security:
      - petstore_auth:
        - write:pets
        - read:pets
  /event/{eventId}:
    delete:
      tags:
      - event
      summary: Deletes an event
      operationId: deleteEvent
      produces:
      - application/json
      - application/xml
      parameters:
      - name: api_key
        in: header
        required: false
        type: string
      - name: eventId
        in: path
        description: event id to delete
        required: true
        type: integer
        format: int64
      responses:
        200:
          description: Success
        400:
          description: Invalid ID supplied
        404:
          description: event not found
      security:
      - petstore_auth:
        - write:pets
        - read:pets
  /user:
    post:
      tags:
      - user
      summary: Create user
      description: This can only be done by the logged in user.
      
      operationId: createUser
      produces:
      - application/json
      - application/xml
      parameters:
      - in: body
        name: body
        description: Created user object
        required: true
        schema:
          $ref: '#/definitions/User'
      responses:
        default:
          description: successful operation
  /user/login:
    get:
      tags:
      - user
      summary: Logs user into the system
      operationId: loginUser
      produces:
      - application/json
      - application/xml
      parameters:
      - name: username
        in: query
        description: The user name for login
        required: true
        type: string
      - name: password
        in: query
        description: The password for login in clear text
        required: true
        type: string
      responses:
        200:
          description: successful operation
          schema:
            type: string
          headers:
            X-Rate-Limit:
              type: integer
              format: int32
              description: calls per hour allowed by the user
            X-Expires-After:
              type: string
              format: date-time
              description: date in UTC when token expires
        400:
          description: Invalid username/password supplied
  /user/logout:
    get:
      tags:
      - user
      summary: Logs out current logged in user session
      operationId: logoutUser
      produces:
      - application/json
      - application/xml
      parameters: []
      responses:
        default:
          description: successful operation
  /user/{username}:
    get:
      tags:
      - user
      summary: Get user event list by user name from info_base
      operationId: getEventsByName
      produces:
      - application/json
      - application/xml
      parameters:
      - name: username
        in: path
        description: enter / to get list of your events and enter * to get the list of events U are added to 
        required: true
        type: string
      responses:
        200:
          description: successful operation
          schema:
            $ref: '#/definitions/User'
        400:
          description: Invalid username supplied
        404:
          description: User not found
    put:
      tags:
      - user
      summary: Adding user
      description: Add user to your event
      operationId: AddUser
      produces:
      - application/json
      - application/xml
      parameters:
      - name: username
        in: path
        description: username that  to be added
        required: true
        type: string
      - in: body
        name: body
        description: Updated event object
        required: true
        schema:
          $ref: '#/definitions/User'
      responses:
        400:
          description: Invalid user supplied
        404:
          description: User not found
    delete:
      tags:
      - user
      summary: Delete user
      description: This can only be done by the logged in user.
      operationId: deleteUser
      produces:
      - application/json
      - application/xml
      parameters:
      - name: username
        in: path
        description: The name that needs to be deleted
        required: true
        type: string
      responses:
        400:
          description: Invalid username supplied
        404:
          description: User not found
  /Event_user/User_find:
    get:
      tags:
      - Data_base
      summary: Returns users for an event
      description: Returns an array of Id
      operationId: GET_Users
      produces:
      - application/json
      parameters: []
      responses:
        200:
          description: Success
        400:
          description: Invalid Id supplied
        404:
          description: Event not found
      security:
      - api_key: []        
  /Event_user/Event_find:
    get:
      tags:
      - Data_base
      summary: Returns events for a user
      description: Returns an array of Id
      operationId: GET_Events
      produces:
      - application/json
      parameters: []
      responses:
        200:
          description: Success
        400:
          description: Invalid Id supplied
        404:
          description: User not found
      security:
      - api_key: []  
securityDefinitions:
  petstore_auth:
    type: oauth2
    authorizationUrl: http://petstore.swagger.io/oauth/dialog
    flow: implicit
    scopes:
      write:pets: modify pets in your account
      read:pets: read your pets
  api_key:
    type: apiKey
    name: api_key
    in: header
definitions:
  User:
    type: object
    properties:
      id:
        type: integer
        format: int64
        example: 1234
      username:
        type: string
        example: "Warrior"
      firstName:
        type: string
        example: "Sam"
      lastName:
        type: string
        example: "Crowley"
      email:
        type: string
        example: "gg.gmail.com"
      password:
        type: string
        example: "*********"
      phone:
        type: string
        example: "124345345364"
      userStatus:
        type: integer
        format: int32
        description: User Status
    xml:
      name: User
  Event:
    type: object
    required:
    - name
    - status
    properties:
      id:
        type: integer
        format: int64
      name:
        type: string
        example: lab OS
      status:
        type: string
        description: event status 
        enum:
        - public 
        - private
        - protected
    xml:
      name: Event
  Event_user : 
    type: object
    properties:
      events:
        type: array
        items:
          type: integer
          format: int32
      users:
        type: array
        items:
          type: integer
          format: int32
      access:
        type: array
        items:
          type: integer
          format: int32
        example:
externalDocs:
  description: Find out more about Swagger
  url: http://swagger.io
# Added by API Auto Mocking Plugin
host: virtserver.swaggerhub.com
basePath: /MrTaras123/Callendar/1.0.0
schemes:
 - https
 - http